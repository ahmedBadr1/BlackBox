<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Activitylog\LogOptions;
use Spatie\Activitylog\Traits\LogsActivity;

use Spatie\Permission\Models\Role;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens,
        HasFactory,
        Notifiable,
        HasRoles,
        LogsActivity;


    /**
     * The attributes that are mass assignable.
     *
     * @var string[]
     */
    protected $fillable = [
        'name',
        'email',
        'phone',
        'state_id',
        'hearAboutUs',
        'password',

    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];
    public static array $hearedAboutUs = ['google', 'facebook', 'event', 'from a friend'];

    protected static $recordEvents = ['updated', 'deleted'];


    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::created(function ($user) {
            $user->profile()->create([
                'bio' => 'new member',
            ]);
        });
    }

    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->setDescriptionForEvent(fn(string $eventName) => "This User has been {$eventName}")
            ->logOnly(['name', 'phone', 'active', 'email', 'password'])
            ->logOnlyDirty()
            ->useLogName('User');;
        // Chain fluent methods for configuration options
    }

    public function getCreatedAtForHumansAttribute()
    {
        return $this->created_at->diffForHumans();
    }

    public static function search($search)
    {
        return empty($search) ? static::query()
            : static::query()->where('id', 'like', '%'.$search.'%')
                ->orWhere('name', 'like', '%'.$search.'%')
                ->orWhere('email', 'like', '%'.$search.'%')
                ->orWhere('phone', 'like', '%'.$search.'%')
                ->orWhereHas('roles', fn($q) => $q->where('name','like', '%'.$search.'%'))
                ->orWhereHas('branch', fn($q) => $q->where('name','like', '%'.$search.'%'));
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }

    public function ordersMonthly($month)
    {
        return $this->hasMany(Order::class)->whereMonth('created_at',$month);
    }
    public function custody(){
        return $this->hasMany(Order::class,'delivery_id');
    }

    public function receipts()
    {
        return $this->hasMany(Receipt::class);
    }
    public function latestOrder()
    {
        return $this->hasOne(Order::class)->latestOfMany();
    }
    public function profile()
    {
        return $this->hasOne(Profile::class);
    }
    public function plan()
    {
        return $this->belongsTo(Plan::class);
    }
    public function location()
    {
        return $this->hasOne(Location::class);
    }
    public function branch()
    {
        return $this->belongsTo(Branch::class);
    }
    public function state()
    {
        return $this->belongsTo(State::class);
    }
    public function zone()
    {
        return  $this->belongsToMany(Zone::class);
    }

    public function locations()
    {
        return $this->hasMany(Location::class);
    }
    public function tasks()
    {
        return $this->hasMany(Task::class);
    }
    public function taskson()
    {
        return $this->hasMany(Task::class,'delivery_id');
    }

}
